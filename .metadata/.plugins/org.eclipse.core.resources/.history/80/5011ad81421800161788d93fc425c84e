package com.jiuqi.gov.acc.va.portal.external;

import com.jiuqi.dna.core.Context;
import com.jiuqi.dna.ui.common.DataObject;
import com.jiuqi.dna.ui.custom.configure.PropertyDescriptor;
import com.jiuqi.dna.ui.custom.configure.editors.StringEditor;
import com.jiuqi.dna.ui.portal.integrate.ConfigurableExternalResourceAccessor;
import com.jiuqi.dna.ui.portal.integrate.LogonInfo;
import com.jiuqi.dna.ui.portal.integrate.LogonMethod;
import com.jiuqi.vacomm.utils.StringUtil;

/**
 * BI类型的外部资源
 * 
 * @author huangrui
 *
 */
public class BIExternalResourceAccessor extends
		ConfigurableExternalResourceAccessor {

	private final static String PROPERTY_ID_SERVER_URL = "server-url";
	private final static String PROPERTY_ID_CREDENTIAL = "credential";
	private final static String PROPERTY_ID_USERNAME = "userName";

	private final PropertyDescriptor[] properties = new PropertyDescriptor[] {
			new PropertyDescriptor(PROPERTY_ID_SERVER_URL, "服务器地址",
					new StringEditor()),
			new PropertyDescriptor(PROPERTY_ID_CREDENTIAL, "凭据参数键名", "凭据参数键名",
					PROPERTY_ID_CREDENTIAL, new StringEditor()),
			new PropertyDescriptor(PROPERTY_ID_USERNAME, "用户名参数键名", "用户名参数键名",
					PROPERTY_ID_USERNAME, new StringEditor())	};

	public String getName() {
		return "ExternalResource_BI";
	}

	public String getTitle() {
		return "BI类型";
	}

	public String getDescription() {
		return "BI类型的外部系统";
	}

	public PropertyDescriptor[] getProperties(Context context, int tabIndex,
			int groupIndex) {
		return properties;
	}

	public String[] getPropertyGroups(Context context, int tabIndex) {
		return null;
	}

	public String[] getPropertyTabs(Context context) {
		return null;
	}

	@SuppressWarnings("restriction")
	public LogonInfo initLogonInfo(String userName, DataObject settings)
			throws Throwable {
		String serverUrl = settings.getString(PROPERTY_ID_SERVER_URL);
		if (StringUtil.isEmpty(serverUrl))
			throw new IllegalArgumentException("无效的服务器地址配置");

		StringBuffer buffer = new StringBuffer();
		buffer.append(serverUrl);
		
		//在配置的URL后面拼接凭据和用户名这两个动态参数
		String credentialKey = settings.getString(PROPERTY_ID_CREDENTIAL);
		if (StringUtil.isEmpty(credentialKey))
			credentialKey = PROPERTY_ID_CREDENTIAL;
		String credential = com.jiuqi.dna.ui.wt.internal.CredentialRegistry
				.generate(userName);
		buffer.append(buffer.indexOf("?") > 0 ? "&" : "?");
		buffer.append(credentialKey).append("=").append(credential);
		
		if(!StringUtil.isEmpty(userName)){
			String userNameKey = settings.getString(PROPERTY_ID_USERNAME);
			if (StringUtil.isEmpty(userNameKey))
				userNameKey = PROPERTY_ID_USERNAME;
			buffer.append(buffer.indexOf("?") > 0 ? "&" : "?");
			buffer.append(userNameKey).append("=").append(userName);
		}

		return new LogonInfo(buffer.toString(), LogonMethod.Post, null);
	}

}
