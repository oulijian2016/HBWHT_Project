package com.jiuqi.gov.acc.va.portal.login;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.jiuqi.dna.bap.authority.intf.task.UserBaseInfoManagerTask;
import com.jiuqi.dna.bap.common.session.CurrentLoginUnitGuidSession;
import com.jiuqi.dna.core.Context;
import com.jiuqi.dna.core.Filter;
import com.jiuqi.dna.core.Login;
import com.jiuqi.dna.core.da.DBCommand;
import com.jiuqi.dna.core.da.RecordSet;
import com.jiuqi.dna.core.def.table.TableDefine;
import com.jiuqi.dna.core.spi.application.Session;
import com.jiuqi.dna.core.spi.application.SituationSPI;
import com.jiuqi.dna.core.type.GUID;
import com.jiuqi.dna.ui.portal.LoginData;
import com.jiuqi.dna.ui.portal.LoginDataTask;
import com.jiuqi.dna.ui.wt.widgets.Display;
import com.jiuqi.sm.acctbook.common.QueryMode;
import com.jiuqi.sm.acctbook.intf.facade.FBook;
import com.jiuqi.sm.acctbook.intf.facade.FUserAndBook;
import com.jiuqi.sm.acctbook.intf.task.UserAndBookTask;
import com.jiuqi.vacomm.env.EnvCenter;
import com.jiuqi.vacomm.env.FUnit;
import com.jiuqi.vacomm.utils.CommonConst;
import com.jiuqi.vacomm.utils.DateUtil;
import com.jiuqi.vacomm.utils.sys.PortalStatusInfo;

/**
 * 登录辅助函数
 * @author huangrui
 *
 */
@SuppressWarnings("deprecation")
public final class LoginTools {

	private static SituationSPI getContext() {
		return Display.getCurrent().getSituation();
	}

	/**
	 * 更新登录环境信息
	 * @param info
	 */
	public static void updateLoginInfo(LoginInfo info) {
		updateLoginInfo(info.getLoginDate(), info.getBookId(), info.getUnitId());
		updateUserType(info.getUserType());
	}
	/**
	 * 初始化账簿常量
	 * @param oldNewBookIdMap key=oldbookid,value=newBookId
	 * @param newOldBookIdMap key=newBookId,value=oldbookid
	 */
	public static void initBookIdMap(Map<GUID,GUID> oldNewBookIdMap, Map<GUID,GUID>  newOldBookIdMap) {
		oldNewBookIdMap.clear();
		oldNewBookIdMap.put(CommonConst.OLD_SYZB_ID, CommonConst.NEW_SYZB_ID);//事业
		oldNewBookIdMap.put(CommonConst.OLD_XZZB_ID, CommonConst.NEW_XZZB_ID);//行政
		oldNewBookIdMap.put(CommonConst.OLD_XXZB_ID, CommonConst.NEW_XXZB_ID);//学校
		oldNewBookIdMap.put(CommonConst.OLD_YYZB_ID, CommonConst.NEW_YYZB_ID);//医院
		oldNewBookIdMap.put(CommonConst.OLD_YYBC_ID, CommonConst.NEW_YYZB_ID);//医院账簿2
		newOldBookIdMap.clear();
		newOldBookIdMap.put(CommonConst.NEW_SYZB_ID, CommonConst.OLD_SYZB_ID);//事业
		newOldBookIdMap.put(CommonConst.NEW_XZZB_ID, CommonConst.OLD_XZZB_ID);//行政
		newOldBookIdMap.put(CommonConst.NEW_XXZB_ID, CommonConst.OLD_XXZB_ID);//学校
		newOldBookIdMap.put(CommonConst.NEW_YYZB_ID, CommonConst.OLD_YYZB_ID);//医院
		newOldBookIdMap.put(CommonConst.NEW_KXZB_ID, CommonConst.OLD_SYZB_ID);//科学
	}
	/**
	 * 判断是否有专业项目未关联的情况
	 * @return
	 */
	public static boolean isExistZYXMNoReLation(Context ctx){
		String sql = "define query Query_ZYXMNoReLation(\n" +
				"		@unitId guid not null,\n" +
				"		@bookId guid not null\n" +
				"		)\n" +
				"begin\n" +
				"		Select count(T.RECID) As ACCTCOUNT\n" +
				"		FROM CAAC_GCGZ_BASE_ZX AS T\n" +
				"		Where  T.UNITID= @unitId\n" +//T.ACCTBOOKID = @bookId 
				"		and  not exists( select 1 from MD_PROJECT as a where a.ZYXM = T.recid )  "//and T.SSZB= @bookId 
				+ " \n end";
			
			DBCommand db = ctx.prepareStatement(sql);
			db.setArgumentValues(EnvCenter.getCurrUnitId(ctx));//, getCurrBookId(ctx)
			int accountNum =0;
			 RecordSet rs = db.executeQuery();
			 if(rs.next()){
				 accountNum= rs.getFields().get(0).getInt();
			 }
			 if(accountNum>0){
					return true;
			 }
		return false;
	}
	
	/**
	    * 
	    * 判断是否有预算项目未关联的情况
	    * @return
	    */
	   public static boolean isExistYSXMNoReLation(Context ctx){
	       List<TableDefine> tableDefineList = ctx.getList(TableDefine.class,new Filter<TableDefine>() {
	 
	           public boolean accept(TableDefine item) {
	               
	               if(item.getName().equals("CAAC_XM")){
	                   return true;
	               }
	               return false;
	           }
	       });
	       if(tableDefineList!=null&&tableDefineList.size()==1){//è?1???o??¤??????±í′??ú￡?￡¨??D??ˉ′|àí￡?
	           String sql = "define query Query_ZYXMNoReLation(\n" +
	                   "        @unitId guid not null,\n" +
	                   "        @acctyear int not null\n" +
	                   "        )\n" +
	                   "begin\n" +
	                   "        Select count(T.RECID) As ACCTCOUNT\n" +
	                   "        FROM CAAC_XM AS T\n" +
	                   "        Where  T.UNITID= @unitId\n" +
	                   "        and  T.ACCTYEAR= @acctyear\n" +
	                   "        and  not exists( select 1 from MD_PROJECT as a where a.YSXM = T.recid )  "//and T.SSZB= @bookId 
	                   + " \n end";
	               
	               DBCommand db = ctx.prepareStatement(sql);
	               db.setArgumentValues(EnvCenter.getCurrUnitId(ctx),EnvCenter.getLoginPeriod(ctx).getYear());//
	               int accountNum =0;
	                RecordSet rs = db.executeQuery();
	                if(rs.next()){
	                    accountNum= rs.getFields().get(0).getInt();
	                }
	                if(accountNum>0){
	                       return true;
	                }
	       }
	       
	       return false;
	   }

	
	/**
	 * 更新登录环境信息
	 * @param date
	 * @param bookID
	 * @param unitID
	 */
	public static void updateLoginInfo(Date date, GUID bookID, GUID unitID) {
		/**
		 * key=oldbookid,value=newBookId
		 */
		Map<GUID,GUID> oldNewBookIdMap = new HashMap<GUID, GUID>();
		/**
		 * key=newBookId,value=oldbookid
		 */
		Map<GUID,GUID>  newOldBookIdMap = new HashMap<GUID, GUID>();
		initBookIdMap(oldNewBookIdMap, newOldBookIdMap);
		//,前台控制选不到旧年度账簿这种情况便不会出现
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		int currYear =c.get(Calendar.YEAR);
		if(currYear>=CommonConst.subsys_change_Year){//科目体系更换年度，新年度
			if(oldNewBookIdMap.get(bookID)!=null ){//选择旧账簿，替换为新账簿bookID.equals(CommonConst.OLD_SYZB_ID)
				//判断新账簿在系统中是否存在
				List<FBook> list = getContext().getList(FBook.class);
				Set<GUID> bookIDSet = new HashSet<GUID>();
				for(FBook book :list){
					bookIDSet.add(book.getRECID());
					/*if(book.getRECID().equals(oldNewBookIdMap.get(bookID))){
						bookID= oldNewBookIdMap.get(bookID);
						break;
					}*/
				}
				if(bookIDSet.contains(oldNewBookIdMap.get(bookID))){
					bookID=oldNewBookIdMap.get(bookID);
				}
				if(bookID.equals(CommonConst.OLD_SYZB_ID)&&
						bookIDSet.contains(CommonConst.NEW_KXZB_ID)){//如果还为事业账簿（旧），说明可能是科学账簿（特殊情况）
					bookID=CommonConst.NEW_KXZB_ID;
				}
				
			}
		}else{//旧年度
			if(newOldBookIdMap.get(bookID)!=null){//选新账簿，替换为旧账簿.equals(CommonConst.NEW_SYZB_ID)
				bookID= newOldBookIdMap.get(bookID);
			}
		}
		
		updateLoginDate(date);
		updateBookId(bookID);
		updateUnitId(unitID);
		updateBookAndUnitText();
	}

	/**
	 * 更新登录日期
	 * @param date
	 */
	public static void updateLoginDate(Date date) {
		if (date != null)
			getContext().handle(new LoginDataTask(LoginData.KEY_LOGIN_DATE, 
				DateUtil.firstSecondOf(date)));
	}

	/**
	 * 更新用户类型
	 * @param userType
	 * @param context
	 */
	public static void updateUserType(UserType userType) {
		getContext().handle(new LoginDataTask(CommonConst.LOGINDATA_KEY_USER_TYPE, userType));
	}

	/**
	 * 缓存当前账簿编码
	 * @param bookID
	 */
	public static void updateBookId(GUID bookID) {
		if (bookID != null && !bookID.isEmpty()) {
			getContext().handle(new LoginDataTask(CommonConst.LOGINDATA_KEY_ACCTBOOK_ID, bookID));
			try {
				updateDefaultBookInfo(bookID);
				updateBookAndUnitText();
			} catch (Exception e) {
				getContext().resolveTrans();
			}
		}
	}

	/**
	 * 保存用户的默认账簿信息
	 * @param bookID
	 */
	private static void updateDefaultBookInfo(GUID bookID) {
		FUserAndBook userBook = getContext().find(FUserAndBook.class, getUserID(),
			QueryMode.Mode.Que_UserAndBook_ByUserID);
		if (userBook == null || !GUID.equals(bookID, userBook.getBookID())) {
			UserAndBookTask task = new UserAndBookTask();
			task.userid = getUserID();
			task.bookid = bookID;
			if (userBook == null) {
				task.recid = getContext().newRECID();
				getContext().handle(task, UserAndBookTask.Method.CREATE);
			} else {
				task.recid = userBook.getRECID();
				getContext().handle(task, UserAndBookTask.Method.UPDATE);
			}
		}
	}

	/**
	 * 缓存当前组织机构编码
	 * @param unitId
	 */
	public static void updateUnitId(GUID unitId) {
		if (unitId == null || unitId.isEmpty()) {
			updateCurrentLoginUnitGuid(GUID.emptyID);	//设置全局环境的组织为空ID
			return;
		}
		FUnit currUnit = EnvCenter.getCurrUnit(getContext());
		if (currUnit != null && GUID.equals(unitId, currUnit.getObjID()))
			return;
		
		FUnit unit = EnvCenter.getUnitByObjectID(getContext(), unitId);
		if (unit == null)
			throw new RuntimeException("未找到指定的组织机构。");
		getContext().handle(new LoginDataTask(CommonConst.LOGINDATA_KEY_UNIT_ID, unit.getUnitId()));
		getContext().handle(new LoginDataTask(CommonConst.LOGINDATA_KEY_UNIT_OBJ, unit));
		try {
			updateCurrentLoginUnitGuid(unitId);
			updateDefaultUnitInfo(unitId);
		} catch (Exception e) {
			getContext().resolveTrans();
		}
	}

	private static void updateBookAndUnitText() {
		new PortalStatusInfo().update(getContext());
	}

	/**
	 * 保存用户的默认单位信息
	 * @param unitId
	 */
	private static void updateDefaultUnitInfo(GUID unitId) {
		UserBaseInfoManagerTask task = new UserBaseInfoManagerTask(getUserID(), unitId);
		getContext().handle(task, UserBaseInfoManagerTask.Method.UPDATE_USER_DEFALUT_UNIT);
	}

	private static GUID getUserID() {
		return getContext().getLogin().getUser().getID();
	}

	/**
	 * 更新当前登录单位GUID信息
	 * @param unitId
	 */
	private static void updateCurrentLoginUnitGuid(GUID unitId) {
		getContext().handle(new CurrentLoginUnitGuidSession(unitId));
		getContext().setUserCurrentOrg(unitId);	//更新当前线程中的当前单位
		Login login = getContext().getLogin();
		if (login != null && login instanceof Session)
			((Session) login).setUserCurrentOrg(unitId); //更新会话中的当前单位
	}

	/**
	 * 获取当前登录用户的用户类型
	 * @return
	 */
	public static UserType getLoginUserType() {
		LoginData loginData = getContext().find(LoginData.class);
		if (loginData != null)
			return (UserType) loginData.getData(CommonConst.LOGINDATA_KEY_USER_TYPE);
		return UserType.UNKNOWN;
	}

}
