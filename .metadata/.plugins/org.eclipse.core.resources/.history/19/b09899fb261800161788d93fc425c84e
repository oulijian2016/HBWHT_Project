package com.jiuqi.gov.acc.va.portal.login;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.jiuqi.dna.bap.authority.intf.facade.FUser;
import com.jiuqi.dna.bap.authority.intf.task.loginpolicy.LoginModifyPassWordTask;
import com.jiuqi.dna.bap.authority.intf.util.AuthorityUtils;
import com.jiuqi.dna.bap.basedata.common.util.BaseDataCenter;
import com.jiuqi.dna.bap.basedata.common.util.BaseDataContextTree;
import com.jiuqi.dna.bap.basedata.intf.facade.FBaseDataObject;
import com.jiuqi.dna.bap.basedata.intf.type.AuthType;
import com.jiuqi.dna.bap.basedata.intf.util.IBaseDataContextHandle;
import com.jiuqi.dna.bap.masterdata.define.intf.facade.MasterDataDefine;
import com.jiuqi.dna.bap.multorg.intf.orgtree.FOrgNode;
import com.jiuqi.dna.bap.multorg.intf.orgtree.FOrgNode.MainOrgResOper;
import com.jiuqi.dna.core.User;
import com.jiuqi.dna.core.auth.Role;
import com.jiuqi.dna.core.resource.ResourceToken;
import com.jiuqi.dna.core.situation.MessageListener;
import com.jiuqi.dna.core.situation.MessageListenerRegHandle;
import com.jiuqi.dna.core.situation.MessageTransmitter;
import com.jiuqi.dna.core.situation.Situation;
import com.jiuqi.dna.core.type.GUID;
import com.jiuqi.dna.ui.common.constants.JWT;
import com.jiuqi.dna.ui.portal.LoginData;
import com.jiuqi.dna.ui.portal.LoginDataTask;
import com.jiuqi.dna.ui.template.launch.TemplateLauncher;
import com.jiuqi.dna.ui.template.launch.TemplateWindow;
import com.jiuqi.dna.ui.template.launch.TemplateWindow.ButtonMessage;
import com.jiuqi.dna.ui.wt.events.WidgetAdapter;
import com.jiuqi.dna.ui.wt.events.WidgetEvent;
import com.jiuqi.dna.ui.wt.widgets.Composite;
import com.jiuqi.gov.acc.va.portal.message.M_SM_ChangeUnit;
import com.jiuqi.gov.acc.va.portal.util.InitManagerConst;
import com.jiuqi.gov.acc.va.portal.util.PropertiesUtil;
import com.jiuqi.sm.acctbook.common.provider.AcctBookProvider;
import com.jiuqi.sm.acctbook.intf.facade.FBook;
import com.jiuqi.sm.acctbook.intf.message.SwitchBookMessage;
import com.jiuqi.util.Base64;
import com.jiuqi.vacomm.env.EnvCenter;
import com.jiuqi.vacomm.env.FPeriod;
import com.jiuqi.vacomm.utils.BaseDataUtil;
import com.jiuqi.vacomm.utils.CommonConst;
import com.jiuqi.vacomm.utils.StringUtil;
import com.jiuqi.vacomm.utils.sys.DataObjectEx;
import com.jiuqi.vacomm.utils.ui.BaseDataContextHandleFactory;

/**
 * 普通用户登录控制逻辑
 * @author huangrui
 *
 */
public class LoginHandlerPageForUser extends LoginHandlerPage {

	public LoginHandlerPageForUser(Composite parent) {
		super(parent);
		// 在根Context上监听切换账簿消息
		parent.getContext().getRoot().regMessageListener(SwitchBookMessage.class,
			new MessageListener<SwitchBookMessage>() {
				public void onMessage(Situation context, SwitchBookMessage message,
						MessageTransmitter<SwitchBookMessage> transmitter) {
					LoginTools.updateBookId(message.getBookid());
				}});
		
		// 监听选择组织机构结束消息，由选择组织机构对话框发送
		final MessageListenerRegHandle<M_SM_ChangeUnit> handler = parent.getContext()
			.regMessageListener(M_SM_ChangeUnit.class, new MessageListener<M_SM_ChangeUnit>() {
				public void onMessage( Situation context, M_SM_ChangeUnit message,
						MessageTransmitter<M_SM_ChangeUnit> transmitter) {
					GUID unitId = message.getUnitID();
					if (unitId != null && !unitId.isEmpty()) {
						LoginTools.updateLoginInfo(message.getDate(), message.getBookID(), 
							message.getUnitID());
						finishLogin();
					}
				}
			});
		addWidgetListener(new WidgetAdapter() {
			public void widgetDisposed(WidgetEvent e) {
				handler.unRegister();
			}
		});
		
		//add by xzb 2013-03-18 设置cookie，标识为登录界面
		getDisplay().getCookie().put("login-page-" + this.getDisplay().getEntryName(), true);
	}

	protected LoginInfo getLoginInfo() throws Exception {
		User loginUser = getContext().getLogin().getUser();
		FUser user = getContext().get(FUser.class, loginUser.getID());
		List<Role> roles = AuthorityUtils.getBelongedRolesByFUserIDUnAuthFilter(getContext(), loginUser.getID());
		boolean isManager = false;
		//判断是否是管理员用户
		for(Role role : roles){
			String roleName = role.getName();
			if(roleName.equals(InitManagerConst.XTGLY)||roleName.equals(InitManagerConst.QXGLY)||roleName.equals(InitManagerConst.RZGLY)){
				isManager= true;
			}
		}
		checkSingleVersion();
		LoginInfo singleInfo = getLoginInfoForSingleVersion(user);
		if(singleInfo != null){
			return singleInfo;
		}
		if (loginUser.getName().equalsIgnoreCase(CommonConst.USER_ADMIN)) {
			throw new Exception("admin用户不能登录到业务系统环境。");
		} else {
			
			//----BI穿透添加     xuzhibing-------------
			LoginInfo info = getLoginInfoForBI(loginUser);
			if(info != null){
				return info;
			}
			//-------------BI穿透添加  end------------
			
			GUID unitId = user.getDefaultUnit();
			if (canLogin(unitId)) {
				UserType userType = UserType.NORMAL;
				GUID bookId = null;
				AcctBookProvider abp = new AcctBookProvider(getContext());
				FBook book = abp.getBookByUserID(loginUser.getID());
				if (book != null)
					bookId = book.getRECID();
				
				//判断该用户对之前登录的账薄是否还有权限。
				//如果有，则正常登录
				//如果没有，则弹出
				boolean isbook = false;
				MasterDataDefine define=BaseDataCenter.findMasterDataDefine(getContext(), "MD_BOOKMAPPING");
				if(define==null){
					isbook= true;
				}
				if(!isbook){
					List<FBook> list = EnvCenter.getBookList(getContext(), unitId);
					for (FBook fBook : list) {
						if(fBook.getRECID().equals(bookId)){
							isbook = true;
							break;
						}
					}
				}
				//当选择父节点时，需要获取所有有权限的账薄去进行比较，判断选择的账薄是否在所有有权限的账薄中
				if(!isbook&&!isManager){
					List<FBaseDataObject>  unitList = BaseDataCenter.getObjectList(getContext(), "MD_ORG");
					for (FBaseDataObject unit : unitList) {
						List<FBook> books = EnvCenter.getBookList(getContext(), unit.getRECID());
						for (FBook fBook : books) {
							if(fBook.getRECID().equals(bookId)){
								isbook = true;
								break ;
							}
						}
						if(isbook){
							break ;
						}
					}
				}
				
				if(!isbook&&!isManager){
					ChangeLoginUnit.openLoginUnitPage(this, true, true);
					return null;
				}
				return LoginInfo.createUserInfo(loginDate == null ? new Date()
						: loginDate, userType, unitId, bookId);
			} else {
				ChangeLoginUnit.openLoginUnitPage(this, true, true);
				return null;
			}
		}
	}

	/**
	 * 单机版注册管理员登录
	 * @author xuzhibing
	 * @return
	 */
	private LoginInfo getLoginInfoForSingleVersion(FUser user) {
		if(PropertiesUtil.isSingleVersion()){
			if(user.getName().equalsIgnoreCase(CommonConst.USER_ADMIN)){
				return null;
			}
			List<Role> roles = AuthorityUtils.getRolesByFUserID(getContext(), user.getGuid());
			boolean isRelativeAdmin = false;
			if(roles != null && roles.size() >0){
				for(Role role : roles){
					if(role.getName().equals(InitManagerConst.XTGLY)){
						isRelativeAdmin = true;
						break;
					}
				}
			}
			if(isRelativeAdmin){
				return LoginInfo.createAdminInfo();
			}
		}
		return null;
	}

	private boolean canLogin(GUID unitId) {
		if (unitId == null || unitId.isEmpty())
			return false;
		ResourceToken<FOrgNode> nodeToken = getContext().findResourceToken(FOrgNode.class, unitId);
		if (nodeToken == null)
			return false;
		return getContext().hasAuthority(MainOrgResOper.ACCESS, nodeToken);
	}

	@Override
	protected void finishLogin() {
		LoginModifyPassWordTask modify = new LoginModifyPassWordTask(
				getContext().getLogin().getUser().getID());
		getContext().handle(modify);
		getContext().handle(new LoginDataTask(LoginData.KEY_LOGIN_TITLE, getContext().getLogin().getUser().getTitle()));
		if (!modify.isNeedModifyPassword) {
			doFinishLogin();
		} else {
			TemplateWindow t = TemplateLauncher.openTemplateWindow(this,
				"LoginUpdateOwnPasswordNew", JWT.CLOSE | JWT.MODAL, JWT.OK | JWT.CANCEL);
			t.setTitle("修改密码");
			t.getPage().getContext().regMessageListener(ButtonMessage.class, 
					new MessageListener<ButtonMessage>() {
				public void onMessage(Situation context, ButtonMessage message,
						MessageTransmitter<ButtonMessage> transmitter) {
					if (message.closeWindow && message.buttonType == JWT.OK)
						doFinishLogin();
				}});
		}
	}

	/**
	 * 根据BI传入的组织机构和账簿获取登陆信息
	 * @author xuzhibing
	 * @param loginUser
	 * @throws Exception 
	 */
	private LoginInfo getLoginInfoForBI(User loginUser) throws Exception {
		//获取入口参数
		String[] args = getDisplay().getCurrent().getEntryArgs();
//		现在参数个数为三个或者为2个（研究院参数有变化）
		if(args !=null && (args.length == 3||args.length == 2)){
			if(!args[0].contains("sso")){
				return null;
			}
			//分割传入的参数值
			String[] strs = args[args.length -1].split(",");
			DataObjectEx dataObject = null;
			if(strs !=null && strs.length > 0){
				dataObject = new DataObjectEx(new String(Base64.base64ToByteArray(strs[strs.length -1])));
			}
			if((args[args.length -1].contains("GOVAcntBalanceList") 
					|| args[args.length -1].contains("GOVCostomAssistBalanceImpl") 
					|| args[args.length -1].contains("GOVDetailLedgerList")
					|| args[args.length -1].contains("GOVCostomAssistDetailImpl"))
					&& dataObject !=null){
				String unitCode = dataObject.getString("unitcodes");
				FBaseDataObject unitObj = null;
				String bookCode = dataObject.getString("bookcode");
				FBook bookObj = null;
				
				String ztYearStr = dataObject.getString("startyear");
				int ztYear = 0;
				String periodStr = dataObject.getString("startperiod");
				int period = 0;
				
				//判断传入的年度是否存在
				if(!StringUtil.isEmpty(ztYearStr)){
					try{
						ztYear = Integer.parseInt(ztYearStr);
						if(ztYear <=0){
							throw new Exception("传入的查询开始年度不是正整数型。");
						}
					}catch(Exception e){
						throw new Exception("传入的查询开始年度不是正整数型。");
					}
				}else{
					throw new Exception("传入的查询开始年度为空。");
				}
				
				//判断传入的期间是否存在
				if(!StringUtil.isEmpty(periodStr)){
					try{
						period = Integer.parseInt(periodStr);
						if(period <1 || period >12){
							throw new Exception("传入的查询开始期间为不是[1-12]范围内的整数型。");
						}
					}catch(Exception e){
						throw new Exception("传入的查询开始期间为不是[1-12]范围内的整数型。");
					}
				}else{
					throw new Exception("传入的查询开始期间为空。");
				}
				
				//判断传入的组织机构是否存在
				if(!StringUtil.isEmpty(unitCode)){
					unitObj = BaseDataCenter.findObject(getContext(), "MD_FINORG", unitCode);
					if(unitObj == null){
						throw new Exception("系统中不存在编码为["+unitCode+"]的财务组织机构。");
					}
				}else{
					throw new Exception("传入的组织机构编码为空。");
				}
				
				//判断传入的账簿是否存在
				if(!StringUtil.isEmpty(bookCode)){
					List<FBook> books = getContext().getList(FBook.class);
					if(books !=null && books.size() >0){
						for(FBook book : books){
							if(book.getStdCode().equals(bookCode)){
								bookObj = book;
								break;
							}
						}
					}
					if(bookObj == null){
						throw new Exception("系统中不存在编码为["+bookCode+"]的账簿。");
					}
				}else{
					throw new Exception("传入的账簿编码为空。");
				}
			
				//判断用户是否有当前组织架构权限
				if(canLogin(unitObj.getRECID()) == false) {
					throw new Exception("当前用户["+loginUser.getName()+"]没有访问组织机构["+unitCode+"]的权限。");
				}
				
				//判断登录年度是否在合法范围内
				FPeriod periodInfo = EnvCenter.getPeriodInfo(getContext(), unitObj.getRECID(),bookObj.getRECID(),CommonConst.MODULE_GL_ID);
				if(periodInfo != null){
					if(ztYear < periodInfo.getStartYear() || ztYear > periodInfo.getMaxYear()){
						throw new Exception("传入的查询开始年度不合法，不在核算启用年度和最大年度之间。");
					}
				}
				
				//建立用户登录日期
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				String dataStr = ztYear + "-" + (period >= 10 ? period : "0"+period) + "-01";
				loginDate = dateFormat.parse(dataStr);
				
				
				//判断传入的组织机构和账簿是否关联
				IBaseDataContextHandle handle = BaseDataContextHandleFactory.createContextHandle(unitObj.getRECID(), ztYear, period);
				BaseDataContextTree baseDataTree = BaseDataUtil.createBaseDataTree(getContext(), "MD_FINORG", handle, AuthType.ACCESS);
				boolean isUnitLeaf = BaseDataUtil.isBaseDataLeaf(baseDataTree, unitObj);
				AcctBookProvider abp = new AcctBookProvider(getContext());
				List<FBook> UnitRelbookList = null;
				//判断组织机构是否为末级财务组织
				if(isUnitLeaf == true){
					UnitRelbookList = abp.getAllBooksByUnitID(unitObj.getRECID());
				}else{//非末级组织机构账簿查询
					UnitRelbookList = new ArrayList<FBook>();
					List<FBaseDataObject> leafUnitList = BaseDataUtil.getBaseDataLeafChildren(baseDataTree, unitObj);
					if(leafUnitList != null && leafUnitList.size() >0){
						for(FBaseDataObject leafUnitObj : leafUnitList){
							List<FBook> tmpBookList = abp.getAllBooksByUnitID(leafUnitObj.getRECID());
							if(tmpBookList !=null && tmpBookList.size() >0){
								if(UnitRelbookList.size() == 0 ){
									UnitRelbookList.addAll(tmpBookList);
								}else{
									//取并集
									for(FBook tmpBook : tmpBookList){
										boolean isExist = false;
										for(FBook relBook : UnitRelbookList){
											if(tmpBook.getRECID().equals(relBook.getRECID())){
												isExist = true;
												break;
											}
										}
										
										if(isExist == false){
											UnitRelbookList.add(tmpBook);
										}
									}
								}
							}
						}
					}
				}
				//进行判断
				if(UnitRelbookList !=null && UnitRelbookList.size() >0){
					boolean isRelation = false;
					for(FBook book : UnitRelbookList){
						if(book.getStdCode().equals(bookCode)){
							isRelation = true;
							break;
						}
					}
					
					if(isRelation == false){
						throw new Exception("组织机构["+unitCode+"]没有关联账簿["+bookCode+"]。");
					}
				}else{
					throw new Exception("组织机构["+unitCode+"]没有关联账簿["+bookCode+"]。");
				}
				
				//创建用户信息，并返回
				UserType userType = UserType.NORMAL;
				return LoginInfo.createUserInfo(loginDate == null ? new Date(): loginDate, userType, unitObj.getRECID(), bookObj.getRECID());
			}
		}
		
		return null;
	}
}
