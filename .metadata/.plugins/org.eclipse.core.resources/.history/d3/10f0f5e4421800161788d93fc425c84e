package com.jiuqi.gov.acc.va.portal.func;

import java.util.List;

import com.jiuqi.dna.core.type.GUID;
import com.jiuqi.dna.ui.common.DataObject;
import com.jiuqi.dna.ui.custom.Option;
import com.jiuqi.dna.ui.custom.configure.editors.ComplexSelector;
import com.jiuqi.dna.ui.funcmgr.SubFunctionAndGroupProvider;
import com.jiuqi.dna.ui.portal.PortalPageContributor;
import com.jiuqi.dna.ui.portlet.PortletPage;
import com.jiuqi.dna.ui.portlet.PortletPageSource;
import com.jiuqi.dna.ui.viewpart.IViewPartGroup;
import com.jiuqi.dna.ui.wt.widgets.Display;
import com.jiuqi.gov.acc.va.portal.login.UserType;
import com.jiuqi.gov.acc.va.portal.util.GmcPortalPageConsts;
//import com.jiuqi.vacomm.utils.CollectionUtil;
//import com.jiuqi.vacomm.utils.StringUtil;

/**
 * 首页多页签提供器
 * 
 * @author tangjingbo
 * @version 2010-6-4
 * @version 2011-8-3 huangrui, 允许各个主页单独配置各自的首页和页签
 */
public class DefaultPortalPageContributor extends PortalPageContributor {

	private DataObject dataObject;

	public DefaultPortalPageContributor() {
		super();
	}

	public DefaultPortalPageContributor(DataObject dataObject) {
		this.dataObject = dataObject;
	}
	

	@Override
	public String getTitle() {
		return "首页多页签提供器";
	}

	@Override
	public GUID[] getPerspectives() {
		//如果有自定义的首页列表，则可显示的首页列表是其中有权限的首页
		List<GUID> authPageIds = getAuthPortletPage();
		List<GUID> customPageIds = getCustomPortletPage();
		if (customPageIds.size() > 0)
			authPageIds.retainAll(customPageIds);
		GUID[] result = new GUID[authPageIds.size()];
		return authPageIds.toArray(result);
	}

	private List<GUID> getAuthPortletPage() {
		List<GUID> result = CollectionUtil.newArrayList();
		for (PortletPage pp : PortletPageSource.getAllPortletPage(true))
			result.add(pp.getId());
		return result;
	}

	private List<GUID> getCustomPortletPage() {
		List<GUID> result = CollectionUtil.newArrayList();
		if (dataObject != null) {
			String portletOption = dataObject
					.getString(GmcPortalPageConsts.PROPERTY_ID_CUSTOM_PORTLET);
			if (!StringUtil.isEmpty(portletOption)) {
				Option[] options = ComplexSelector.getOptions(portletOption);
				for (Option option : options)
					result.add(GUID.valueOf(option.value));
			}
		}
		return result;
	}

	@Override
	public GUID[] getFunctionTreeRoot() {
		Option[] options = getTabOptions();
		options = filterOption(options);
		if (options != null) {
			GUID[] functionIds = new GUID[options.length];
			List<GUID> groupIds = CollectionUtil.newArrayList();
			SubFunctionAndGroupProvider provider = new SubFunctionAndGroupProvider(
					getContext());
			for (int i = 0; i < options.length; i++) {
//				functionIds[i] = Convert.toGUID(options[i].value);
				functionIds[i] = GUID.valueOf(options[i].value);
				IViewPartGroup group = getContext().find(IViewPartGroup.class,
						functionIds[i]);
				if (group != null) {
					Object[] children = provider.getChildren(group);
					if (children != null && children.length > 0)
						groupIds.add(functionIds[i]);
				}
			}
			return groupIds.toArray(new GUID[groupIds.size()]);
		}
		return super.getFunctionTreeRoot();
	}

	/**
	 * 读取页签设置，如果没有单独设置，则读取全局页签设置
	 * @return
	 */
	private Option[] getTabOptions() {
		String tabOption = null;
		if (dataObject != null)
			tabOption = dataObject
					.getString(GmcPortalPageConsts.PROPERTY_ID_CUSTOM_TAB);
		if (StringUtil.isEmpty(tabOption)) {
			dataObject = getSettingData(TreeViewPartDefine.SETTING_DATA_ID);
			if(dataObject!=null)
			   tabOption = dataObject.getString(UserType.NORMAL.name());
		}
		return tabOption == null ? null : ComplexSelector.getOptions(tabOption);
	}
	/**
	 * 根据入口参数过滤首页大页签
	 * @param options
	 * @return Option[]
	 */
	public Option[] filterOption(Option[] options){
		String[] systemPara = Display.getCurrent().getEntryArgs();//获取入口参数
		if(systemPara!=null){
			for(int g=0;g<systemPara.length;g++){
				String param = systemPara[g];
				if(param!=null && param.startsWith("mhpage")){
					String[] paraArray = param.split("@");
					Option[] optionsFiltered = new Option[paraArray.length-1];
					Boolean flag=false;
					for(int i=0;i<paraArray.length;i++){
						if(i==0)  continue;
						Option option = new Option();
						for(int t=0;t<options.length;t++){
							String text = options[t].text;
							if(text.equalsIgnoreCase(paraArray[i].trim())){
					       		option.text = text;
		                        option.value = 	options[t].value;
		                        optionsFiltered[i-1] = option;
		                        flag=true;
		                        break;
							}
						}
					}
					if (flag){
						 return optionsFiltered;
						}else{
							return null;
						}
				}
			}	
		}		
		return options;
	}
}
