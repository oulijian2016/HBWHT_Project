package com.jiuqi.gov.acc.va.portal.login.page;

import static com.jiuqi.gov.acc.va.portal.ui.LogoImageGroup.LoginImage.*;

import java.awt.Window;
import java.util.ArrayList;
import java.util.List;

import com.jiuqi.dna.core.type.GUID;
import com.jiuqi.dna.ui.appearance.IdentityValueQuerier;
import com.jiuqi.dna.ui.appearance.Resource;
import com.jiuqi.dna.ui.common.constants.JWT;
import com.jiuqi.dna.ui.custom.combo.DatePicker;
import com.jiuqi.dna.ui.language.PortalInfoGroup;
import com.jiuqi.dna.ui.portal.template.def.LoginViewPage;
import com.jiuqi.dna.ui.thr.ole.flash.list.Image3DDescriptor;
import com.jiuqi.dna.ui.thr.ole.flash.list.ImageList3D;
import com.jiuqi.dna.ui.wt.events.ActionEvent;
import com.jiuqi.dna.ui.wt.events.ActionListener;
import com.jiuqi.dna.ui.wt.graphics.CBorder;
import com.jiuqi.dna.ui.wt.graphics.Color;
import com.jiuqi.dna.ui.wt.graphics.Cursor;
import com.jiuqi.dna.ui.wt.graphics.DataImageDescriptor;
import com.jiuqi.dna.ui.wt.graphics.FileImageDescriptor;
import com.jiuqi.dna.ui.wt.graphics.Font;
import com.jiuqi.dna.ui.wt.graphics.ImageDescriptor;
import com.jiuqi.dna.ui.wt.layouts.BorderData;
import com.jiuqi.dna.ui.wt.layouts.BorderLayout;
import com.jiuqi.dna.ui.wt.layouts.FillLayout;
import com.jiuqi.dna.ui.wt.layouts.GridData;
import com.jiuqi.dna.ui.wt.layouts.GridLayout;
import com.jiuqi.dna.ui.wt.widgets.Button;
import com.jiuqi.dna.ui.wt.widgets.Composite;
import com.jiuqi.dna.ui.wt.widgets.Label;
import com.jiuqi.dna.ui.wt.widgets.Layout;
import com.jiuqi.dna.ui.wt.widgets.Text;
import com.jiuqi.dna.ui.wt.widgets.XYLayoutPanel;
import com.jiuqi.gov.acc.va.portal.ui.LogoImageGroup;
import com.jiuqi.gov.acc.va.portal.ui.LogoImageGroup.FlashImage;
import com.jiuqi.xlib.utils.StringUtil;

/**
 * 带幻灯片效果的登录页面
 * 
 * @author huangrui
 *
 */
public class FlashLoginPage extends LoginViewPage {

	private final static ImageDescriptor bgImage = LogoImageGroup.getImageDesc(DL_BG);
	private final static ImageDescriptor loginButtonNomalImage = LogoImageGroup.getImageDesc(DL_BUTTON_NORMAL);
	private final static ImageDescriptor loginButtonHoverImage = LogoImageGroup.getImageDesc(DL_BUTTON_HOVER);
	private final static ImageDescriptor userLoginImage = LogoImageGroup.getImageDesc(DL_USER_LOGIN);
	private static ImageDescriptor mainLogoImage;
	private static GUID imgGroup;
	
	private final static ImageDescriptor  newLoginButtonNormal = 
		FileImageDescriptor.createImageDescriptor("com.jiuqi.va.portal","images/buttonh.jpg");
	private final static ImageDescriptor  newLoginButtonOn = 
		FileImageDescriptor.createImageDescriptor("com.jiuqi.va.portal","images/button.jpg");
	private final static ImageDescriptor  newLogoPage = 
		FileImageDescriptor.createImageDescriptor("com.jiuqi.va.portal","images/logo.jpg");
	private final static ImageDescriptor  newMainPage = 
		FileImageDescriptor.createImageDescriptor("com.jiuqi.va.portal","images/main.jpg");
	
	
	private Composite hiddenArea;
	private Composite loginArea;

	public FlashLoginPage(final Composite parent) {
		super(parent);
 		mainLogoImage = getContext().find(ImageDescriptor.class,
				new IdentityValueQuerier(dataObject.getString(
						FlashLoginPageDefine.PROPERTY_ID_IMG_LOGO, "")));
		if (mainLogoImage == null)
			mainLogoImage = LogoImageGroup.getImageDesc(DL_MAIN_LOGO);
		String sGroup = dataObject.getString(
				FlashLoginPageDefine.PROPERTY_ID_IMG_FLASH, "");
		imgGroup = StringUtil.isEmpty(sGroup)? null : GUID.valueOf(sGroup);
		createContent();//va6以前的登录界面
		init();
	}
	//*************************************
	private void createNewContent() {
		
		this.setLayout(new FillLayout());
		Composite AllAre = new Composite(this);
		GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL 
				| GridData.VERTICAL_ALIGN_CENTER | GridData.GRAB_VERTICAL 
				| GridData.GRAB_HORIZONTAL);
		AllAre.setLayoutData(gridData);
		GridLayout layout = new GridLayout(1);
		layout.horizontalSpacing = 0;
		layout.verticalSpacing = 0;
		AllAre.setLayout(layout);
		AllAre.setBackground(new Color(0XCDE3F1));
		
		
		Composite middleAre = new Composite(AllAre);
		middleAre.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER | 
				GridData.HORIZONTAL_ALIGN_CENTER| GridData.GRAB_HORIZONTAL 
		           | GridData.GRAB_VERTICAL));
		layout = new GridLayout();
		layout.horizontalSpacing = 0;
		layout.verticalSpacing = 0;
		middleAre.setLayout(layout);
		
		
		loginArea = new Composite(middleAre);
		loginArea.setLayoutData(new GridData(1027,700));
		
		loginArea.setLayout(new Layout());
//		193*26
		loginArea.setSize(1027, 700);
		loginArea.setBackimage(newMainPage);
		Label lUser = new Label(loginArea);
		String textU = "用户名：";
		lUser.setText(textU);
		lUser.setSize(48, 14);
		lUser.setLocation(198, 282);
		
		userNameText = new Text(loginArea,JWT.MIDDLE);
		userNameText.setSize(193, 26);
		userNameText.setLocation(248, 273);
		userNameText.setActiveBackground(new Color(Color.COLOR_WHITE.getColor()));
		userNameText.setForeground(new Color(0X44444));
		
		Label IPassWord = new Label(loginArea);
		String textP = "密  码：";;
		IPassWord.setText(textP);
		IPassWord.setSize(48, 14);
		IPassWord.setLocation(198, 320);
		
		pwdText = new Text(loginArea, JWT.PASSWORD|JWT.MIDDLE);
		pwdText.setSize(193, 26);
		pwdText.setLocation(248, 311);
		pwdText.setActiveBackground(new Color(Color.COLOR_WHITE.getColor()));
		pwdText.setForeground(new Color(0X44444));
		
		Label IDate = new Label(loginArea);
		String textD = "日  期：";;
		IDate.setText(textD);
		IDate.setSize(48, 14);
		IDate.setLocation(200, 355);
		
		if (showDatePicker) {
			dateText = new DatePicker(loginArea,JWT.MIDDLE);
			dateText.setSize(193, 26);
			dateText.setLocation(248, 347);
			dateText.setActiveBackground(new Color(Color.COLOR_WHITE.getColor()));
			dateText.setForeground(new Color(0X44444));
		}
		
		
		loginButton = new Composite(loginArea);
		loginButton.setCursor(Cursor.HAND);
		loginButton.setBackimage(newLoginButtonNormal);
		loginButton.setHoverBackimage(newLoginButtonOn);
		loginButton.setSize(94, 32);
		loginButton.setLocation(250, 385);
		
		
		hiddenArea = new Composite(loginArea);
		gridData = new GridData();
		gridData.exclude = true;
		hiddenArea.setLayoutData(gridData);
		hiddenArea.setVisible(false);
		
		}
//********************************************

	//获得版本
	private void getTheVersion(Composite parent) {
		if (!this.hideCopyright) {
			Label label = new Label(parent);
			String text = getContext().localize(
					getContext().find(PortalInfoGroup.class).COPYRIGHT_JIUQI);
			GridData layoutData = new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
//			layoutData.horizontalIndent = (userLoginImage.getWidth() - text.length() * 11) / 2;
			label.setLayoutData(layoutData);
			label.setText(text);
		}
	}
	
	
	
	
	//****************************************
	protected Composite getLoginArea() {
		return loginArea;
	}

	protected Composite getHiddenArea() {
		return hiddenArea;
	}

	private List<Image3DDescriptor> createImageList(GUID groupId) {
		List<Image3DDescriptor> result = new ArrayList<Image3DDescriptor>();
		if (groupId != null) {
			for (Resource res : getContext().getList(Resource.class, groupId)) {
				ImageDescriptor image = getContext().find(
						ImageDescriptor.class, res.getId());
				if (image != null) {
					String name = res.getName();
					if (name.indexOf('.') != -1)
						name = name.substring(0, name.indexOf('.'));
					result.add(new Image3DDescriptor(res.getId().toString(),
							image, name));
				}
			}
		} else {
			for (FlashImage img : FlashImage.values())
				result.add(new Image3DDescriptor(img.name(), LogoImageGroup
						.getImageDesc(img.name()), " "));
		}
		return result;
	}

	private void createContent() {
		GridLayout gridLayout = new GridLayout();
		gridLayout.verticalSpacing = 0;
		this.setLayout(gridLayout);

		Composite topArea = new Composite(this);
		topArea.setBackground(new Color(0Xffffff));
		topArea.setLayoutData(GridData.INS_FILL_BOTH);
		Composite middleArea = new Composite(this);
		Composite bottomArea = new Composite(this);
		bottomArea.setLayoutData(GridData.INS_FILL_BOTH);
		bottomArea.setBackground(new Color(0Xffffff));
		
		GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL 
				| GridData.VERTICAL_ALIGN_CENTER | GridData.GRAB_VERTICAL 
				| GridData.GRAB_HORIZONTAL);

		middleArea.setLayoutData(gridData);
		GridLayout layout = new GridLayout();
		layout.horizontalSpacing = 0;
		layout.verticalSpacing = 0;
		middleArea.setLayout(layout);
		middleArea.setBackimage(bgImage);
		fillMiddleArea(middleArea);
	}

	private void fillMiddleArea(Composite middleArea) {
		Composite workArea = new Composite(middleArea);
		GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_CENTER
		           | GridData.VERTICAL_ALIGN_CENTER | GridData.GRAB_HORIZONTAL 
		           | GridData.GRAB_VERTICAL);
		workArea.setLayoutData(gridData);
		GridLayout layout = new GridLayout(2);
		layout.horizontalSpacing = 0;
		layout.verticalSpacing = 0;
		workArea.setLayout(layout);
		
		Composite flashArea = new Composite(workArea);
		flashArea.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER | GridData.HORIZONTAL_ALIGN_CENTER));
		layout = new GridLayout();
		layout.horizontalSpacing = 0;
		layout.verticalSpacing = 0;
		flashArea.setLayout(layout);
		Composite userLoginArea = new Composite(workArea);
		userLoginArea.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER | GridData.HORIZONTAL_ALIGN_CENTER));
		userLoginArea.setLayout(layout);
		userLoginArea.setBackimage(bgImage);
		createFlashArea(flashArea);
		createLoginArea(userLoginArea);
		
		Composite copyRightArea = new Composite(userLoginArea);
		Composite blankArea = new Composite(flashArea);
		gridData = new GridData(GridData.FILL_BOTH);
		gridData.heightHint = 12;
		copyRightArea.setLayoutData(gridData);
		blankArea.setLayoutData(gridData);
		copyRightArea.setLayout(new GridLayout());
		
		createCopyRightArea(copyRightArea);
	}

	private void createFlashArea(Composite parent) {
		Composite mainLogoArea = new Composite(parent);
		mainLogoArea.setBackimage(mainLogoImage);
		GridData gridData = new GridData();
		gridData.heightHint = mainLogoImage.getHeight();
		gridData.widthHint = mainLogoImage.getWidth();
		mainLogoArea.setLayoutData(gridData);
		
		Label topLabel = new Label(parent);
		topLabel.setImage(LogoImageGroup.getImageDesc(DL_FLASH_TOP));
		
		Composite middleArea = new Composite(parent);
		middleArea.setLayoutData(new GridData());//.INS_FILL_BOTH);
		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 3;
		gridLayout.horizontalSpacing = 0;
		gridLayout.verticalSpacing = 0;
		gridLayout.marginTop = 0;
		gridLayout.marginBottom = 0;
		middleArea.setLayout(gridLayout);

		Label bottomLeftLabel = new Label(parent);
		bottomLeftLabel.setImage(LogoImageGroup.getImageDesc(DL_FLASH_BOTTOM));

		Label leftLabel = new Label(middleArea);
		leftLabel.setImage(LogoImageGroup.getImageDesc(DL_FLASH_LEFT));

		Composite centerArea = new Composite(middleArea);
		gridData = new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
		gridData.heightHint = 218;
		gridData.widthHint = 516;
		centerArea.setLayoutData(gridData);

		Label rightLabel = new Label(middleArea);
		rightLabel.setImage(LogoImageGroup.getImageDesc(DL_FLASH_RIGHT));
		rightLabel.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));

		centerArea.setLayout(new GridLayout());
		ImageList3D img3D = new ImageList3D(centerArea, createImageList(imgGroup), 1);
		img3D.setLayoutData(new GridData(GridData.FILL_BOTH));
	}

	private void createLoginArea(Composite parent) {
		Composite topArea = new Composite(parent);
		topArea.setBackimage(userLoginImage);
		GridData gridData = new GridData();
		gridData.heightHint = userLoginImage.getHeight();
		gridData.widthHint = userLoginImage.getWidth();
		topArea.setLayoutData(gridData);
		
		Label topLabel = new Label(parent);
		topLabel.setImage(LogoImageGroup.getImageDesc(DL_LOGIN_TOP));
		
		loginArea = new Composite(parent);
		loginArea.setBackimage(LogoImageGroup.getImageDesc(DL_LOGIN_AREA));
//		loginArea.setLayoutData((GridData.INS_FILL_VERTICAL));
		
		Label bottomLabel = new Label(parent);
		bottomLabel.setImage(LogoImageGroup.getImageDesc(DL_LOGIN_BOTTOM));

		GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 4;
		gridLayout.marginLeft = 40;
		gridLayout.marginTop = 110;
		gridLayout.marginRight = 27;
		gridLayout.marginBottom = 15;
		if (showDatePicker) {
			gridLayout.marginTop = gridLayout.marginTop - 31;
		}
		if (showVerifyCode) {
			gridLayout.marginTop = gridLayout.marginTop - 31;
//			gridLayout.marginRight = 15;
		}
		gridLayout.verticalSpacing = 10;
		gridLayout.horizontalSpacing = 10;
		loginArea.setLayout(gridLayout);

		gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.horizontalSpan = 3;

		Label userNamelabel = new Label(loginArea);
		userNamelabel.setText("用户名：");
		userNameText = new Text(loginArea,JWT.BOTTOM);
		userNameText.setLayoutData(gridData);

		Label userPwdlabel = new Label(loginArea);
		userPwdlabel.setText("密  码：");

		pwdText = new Text(loginArea, JWT.PASSWORD|JWT.BOTTOM);
		pwdText.setLayoutData(gridData);

		if (showDatePicker) {
			Label datelabel = new Label(loginArea);
			datelabel.setText("日  期：");

			dateText = new DatePicker(loginArea,JWT.BOTTOM);
			dateText.setLayoutData(gridData);
		}

		if (showVerifyCode) {
			Label verifylabel = new Label(loginArea);
			verifylabel.setText("验证码");
			verifyCodeText = new Text(loginArea);
			verifyCodeText.setLayoutData(GridData.INS_FILL_HORIZONTAL);
			final Label verifyImageLabel = new Label(loginArea, JWT.IMAGE);
			ImageDescriptor verifyImage = null;
			try {
				verifyCode = randomImage.getRandString();
				verifyImage = DataImageDescriptor.createImageDescriptor(
						randomImage.getImage(verifyCode), verifyImageLabel);
				verifyImageLabel.setImage(verifyImage);
			} catch (Throwable t) {
			}
			gridData = new GridData();
			gridData.widthHint = verifyImage.getWidth();
			gridData.heightHint = verifyImage.getHeight();
			verifyImageLabel.setLayoutData(gridData);

			Button button = new Button(loginArea, JWT.LINK);
			button.setText("刷新");
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					ImageDescriptor verifyImage = null;
					try {
						verifyCode = randomImage.getRandString();
						verifyImage = DataImageDescriptor
								.createImageDescriptor(randomImage
										.getImage(verifyCode), verifyImageLabel);
						verifyImageLabel.setImage(verifyImage);
					} catch (Throwable t) {
					}
				}
			});
		}

		new Label(loginArea);

		loginButton = new Composite(loginArea);
		loginButton.setCursor(Cursor.HAND);
		loginButton.setBackimage(loginButtonNomalImage);
		loginButton.setHoverBackimage(loginButtonHoverImage);
		gridData = new GridData();
		gridData.horizontalSpan = 2;
		gridData.widthHint = loginButtonNomalImage.getWidth();
		gridData.heightHint = loginButtonNomalImage.getHeight();
		loginButton.setLayoutData(gridData);

		//
		hiddenArea = new Composite(loginArea);
		gridData = new GridData();
		gridData.exclude = true;
		hiddenArea.setLayoutData(gridData);
		hiddenArea.setVisible(false);
	}

	private void createCopyRightArea(Composite parent) {
		if (!this.hideCopyright) {
			Label label = new Label(parent);
			String text = getContext().localize(
					getContext().find(PortalInfoGroup.class).COPYRIGHT_JIUQI);
			GridData layoutData = new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
			layoutData.horizontalIndent = (userLoginImage.getWidth() - text.length() * 11) / 2;
			label.setLayoutData(layoutData);
			label.setText(text);
		}
	}

}
