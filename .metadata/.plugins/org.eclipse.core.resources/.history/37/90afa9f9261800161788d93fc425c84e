package com.jiuqi.gov.acc.va.portal.login;

import java.util.List;
import java.util.Properties;

import com.jiuqi.dna.bap.common.constants.MsgDialogConst;
import com.jiuqi.dna.ui.common.constants.JWT;
import com.jiuqi.dna.ui.custom.WindowConfigure;
import com.jiuqi.dna.ui.funcmgr.IFunction;
import com.jiuqi.dna.ui.portal.LoginFinishMessage;
import com.jiuqi.dna.ui.viewpart.ViewPartDisplayWindow;
import com.jiuqi.dna.ui.viewpart.ViewPartInstance;
import com.jiuqi.dna.ui.wt.events.SelectionEvent;
import com.jiuqi.dna.ui.wt.events.SelectionListener;
import com.jiuqi.dna.ui.wt.events.WindowEvent;
import com.jiuqi.dna.ui.wt.events.WindowListener;
import com.jiuqi.dna.ui.wt.widgets.Composite;
import com.jiuqi.dna.ui.wt.widgets.MessageDialog;
import com.jiuqi.gov.acc.va.portal.util.PropertiesUtil;
import com.jiuqi.vacomm.env.EnvCenter;
import com.jiuqi.vacomm.utils.CommonConst;

/**
 * 管理员登录控制逻辑
 * @author huangrui
 *
 */
public class LoginHandlerPageForManage extends LoginHandlerPage {

	public LoginHandlerPageForManage(Composite parent) {
		super(parent);
	}

	protected LoginInfo getLoginInfo() throws Exception {
		checkSingleVersion();
		String userName = getContext().getLogin().getUser().getName();
		if (!userName.equalsIgnoreCase(CommonConst.USER_ADMIN))
			throw new Exception("只有系统管理员才能登录到管理界面。");
		return LoginInfo.createAdminInfo();
	}

	@Override
	protected void finishLogin() {
		try {
			LoginInfo info = getLoginInfo();
			if (info != null) {

				LoginTools.updateLoginInfo(info);
				try{
					if(LoginTools.isExistYSXMNoReLation(getContext())){
						final IFunction function = getFuncByDescription("项目");
						if (function == null) {
							MessageDialog.alert("存在未关联的预算项目，请打开\"基础数据-项目\"，在\n预算项目字段处进行关联！ ");
						}else{
							MessageDialog.alert("存在未关联的预算项目，请点击\"确认\"打开项目基础数据进行关联！ ").addSelectionListener(new SelectionListener() {
								
								public void widgetSelected(SelectionEvent arg0) {
									turnToXMFunction( function );
									
								}
							});
						}
					}else if(LoginTools.isExistZYXMNoReLation(getContext())){//如果有专业项目未关联，给出提示，深度开发个性化需求
						MessageDialog.alert("存在未关联的专业项目，请打开\"基础数据-项目\"，在\n专业项目字段处进行关联！ ");
						
					}
					
				}catch(Throwable e){
					e.printStackTrace();
				}
				//1、表示单机版，0表示网络版
				if (PropertiesUtil.isSingleVersion() && info.getUserType() == UserType.ADMIN) {//单机版并且是系统管理员时
					System.setProperty("isSingleVersion", "true");
					openMaxWindow();
				}else{
					getContext().bubbleMessage(new LoginFinishMessage());
				}
			}
		} catch (Throwable t) {
			getContext().bubbleMessage(new LoginFinishMessage(t));
		}
	}
	/**
	 * 根据描述获取功能
	 * @return
	 */
	private IFunction getFuncByDescription(String description){
		IFunction function = null;
		List<IFunction>	 functionList= getContext().getList(IFunction.class);
		for(IFunction func:functionList){
			if(description.equals(func.getDescription())){
				function=func;
				break;
			}
		}
		return function;
	}
	/**
	 * 跳转至项目基础数据   功能描述必须为“项目”
	 */
	private void turnToXMFunction(IFunction function ){
		if(function!=null){
			ViewPartInstance viewPartInstance=(ViewPartInstance) function;
			WindowConfigure configure=new WindowConfigure();
			configure.dialogStyle=JWT.MAXIMUM|JWT.MODAL|JWT.CLOSE;
			ViewPartDisplayWindow window=new ViewPartDisplayWindow(configure,viewPartInstance);
			window.setMaximum(true);
		}
		
	}
	
}